import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from imblearn.combine import SMOTEENN
from imblearn.under_sampling import NeighbourhoodCleaningRule
from imblearn.over_sampling import RandomOverSampler


# Load the dataset
df_extreme_skewed = pd.read_csv('sla_violation_dataset_extreme_skewed_adjusted.csv')


# Prepare the data (features and target)
X_extreme = df_extreme_skewed[['CPU Usage', 'Memory Usage', 'Disk I/O', 'Network Throughput']]
y_extreme = df_extreme_skewed['SLA Violation']


# Split the data into training and testing sets
X_train_extreme, X_test_extreme, y_train_extreme, y_test_extreme = train_test_split(X_extreme, y_extreme, test_size=0.3, random_state=42)


# Define the resampling techniques
resamplers = {
   "SMOTEENN": SMOTEENN(random_state=42),
   "NCR": NeighbourhoodCleaningRule(),
   "ROS": RandomOverSampler(random_state=42)
}


# Define the models
models = {
   "Random Forest": RandomForestClassifier(random_state=42),
   "Naive Bayes": GaussianNB(),
   "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
   "SVM": SVC(random_state=42)
}


# Store results
accuracy_results = []


# Loop over each resampling technique
for resampler_name, resampler in resamplers.items():
   # Apply resampling
   X_train_resampled, y_train_resampled = resampler.fit_resample(X_train_extreme, y_train_extreme)


   # Loop over each model
   for model_name, model in models.items():
       # Train the model
       model.fit(X_train_resampled, y_train_resampled)


       # Make predictions on the test set
       predictions = model.predict(X_test_extreme)


       # Calculate accuracy for SLA violations (label=1)
       accuracy = accuracy_score(y_test_extreme[y_test_extreme == 1], predictions[y_test_extreme == 1])


       # Store the results
       accuracy_results.append({
           "Resampler": resampler_name,
           "Model": model_name,
           "Accuracy (SLA Violated)": accuracy
       })


# Convert results to DataFrame for better presentation
df_accuracy_results = pd.DataFrame(accuracy_results)


# Display the results
print(df_accuracy_results)
